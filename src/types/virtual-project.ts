// 实际项目数据类型定义
export interface Project {
  id: string;
  name: string;
  description: string;
  userId: string;
  createdAt: Date;
  updatedAt: Date;
  path: string; // 项目在文件系统中的路径
  status: 'active' | 'archived';
  framework: 'nextjs' | 'react' | 'vue';
}

// 项目创建请求类型
export interface CreateProjectRequest {
  name: string;
  description?: string;
  framework?: 'nextjs' | 'react' | 'vue';
}

// 项目更新请求类型
export interface UpdateProjectRequest {
  name?: string;
  description?: string;
  status?: 'active' | 'archived';
}

// API响应类型
export interface ProjectResponse {
  project: Project;
  message?: string;
}

export interface ProjectsResponse {
  projects: Project[];
}

export interface ProjectStatsResponse {
  project: Project;
  stats: {
    files: {
      total: number;
      byType: Record<string, number>;
    };
    size: number;
    lastModified: Date;
  };
}

// 生成项目ID的工具函数
export function generateProjectId(): string {
  return `proj_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
}

// 生成唯一项目ID
export function generateProjectId(): string {
  return `proj_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
}

// 验证项目名称唯一性 (移动到VirtualProjectService中)
// export function validateProjectName(userId: string, projectName: string, excludeId?: string): boolean {

// 默认项目模板
export const defaultProjectTemplate: Omit<Project, 'id' | 'userId' | 'name' | 'description' | 'createdAt' | 'updatedAt'> = {
  thumbnail: undefined,
  status: 'draft',
  type: 'component',
  framework: 'nextjs',
  files: [
    {
      id: 'file-1',
      name: 'package.json',
      path: 'package.json',
      content: JSON.stringify({
        "name": "ai-generated-project",
        "version": "0.1.0",
        "private": true,
        "scripts": {
          "dev": "next dev",
          "build": "next build",
          "start": "next start",
          "lint": "next lint"
        },
        "dependencies": {
          "next": "15.4.1",
          "react": "19.1.0",
          "react-dom": "19.1.0"
        },
        "devDependencies": {
          "@types/node": "^20",
          "@types/react": "^19",
          "@types/react-dom": "^19",
          "typescript": "^5",
          "tailwindcss": "^4"
        }
      }, null, 2),
      type: 'json',
      isGenerated: true,
      lastModified: new Date(),
      dependencies: [],
      exports: []
    },
    {
      id: 'file-2',
      name: 'layout.tsx',
      path: 'src/app/layout.tsx',
      content: `import type { Metadata } from 'next';
import './globals.css';

export const metadata: Metadata = {
  title: 'AI Generated Project',
  description: 'Generated by Rapidux AI',
};

export default function RootLayout({
  children,
}: {
  children: React.ReactNode;
}) {
  return (
    <html lang="en">
      <body className="antialiased">
        {children}
      </body>
    </html>
  );
}`,
      type: 'tsx',
      isGenerated: true,
      lastModified: new Date(),
      dependencies: [],
      exports: ['default', 'metadata']
    },
    {
      id: 'file-3',
      name: 'page.tsx',
      path: 'src/app/page.tsx',
      content: `export default function HomePage() {
  return (
    <div className="min-h-screen bg-gray-50 p-8">
      <div className="max-w-4xl mx-auto">
        <h1 className="text-3xl font-bold text-center mb-8">
          Welcome to AI Generated Project
        </h1>
        <p className="text-center text-gray-600">
          This project was generated by Rapidux AI
        </p>
      </div>
    </div>
  );
}`,
      type: 'tsx',
      isGenerated: true,
      lastModified: new Date(),
      dependencies: [],
      exports: ['default']
    },
    {
      id: 'file-4',
      name: 'globals.css',
      path: 'src/app/globals.css',
      content: `@tailwind base;
@tailwind components;
@tailwind utilities;

:root {
  --background: 0 0% 100%;
  --foreground: 222.2 84% 4.9%;
}

.dark {
  --background: 222.2 84% 4.9%;
  --foreground: 210 40% 98%;
}

* {
  border-color: hsl(var(--border));
}

body {
  background-color: hsl(var(--background));
  color: hsl(var(--foreground));
}`,
      type: 'css',
      isGenerated: true,
      lastModified: new Date(),
      dependencies: [],
      exports: []
    }
  ],
  config: {
    nextConfig: {
      experimental: {
        externalDir: true
      }
    },
    tsConfig: {
      compilerOptions: {
        target: "es5",
        lib: ["dom", "dom.iterable", "es6"],
        allowJs: true,
        skipLibCheck: true,
        strict: true,
        noEmit: true,
        esModuleInterop: true,
        module: "esnext",
        moduleResolution: "bundler",
        resolveJsonModule: true,
        isolatedModules: true,
        jsx: "preserve",
        incremental: true,
        plugins: [{ name: "next" }],
        baseUrl: ".",
        paths: { "@/*": ["./src/*"] }
      },
      include: ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
      exclude: ["node_modules"]
    },
    tailwindConfig: {
      content: [
        './src/pages/**/*.{js,ts,jsx,tsx,mdx}',
        './src/components/**/*.{js,ts,jsx,tsx,mdx}',
        './src/app/**/*.{js,ts,jsx,tsx,mdx}',
      ],
      theme: {
        extend: {}
      },
      plugins: []
    },
    dependencies: {
      "next": "15.4.1",
      "react": "19.1.0",
      "react-dom": "19.1.0"
    },
    devDependencies: {
      "@types/node": "^20",
      "@types/react": "^19",
      "@types/react-dom": "^19",
      "typescript": "^5",
      "tailwindcss": "^4"
    },
    settings: {
      theme: 'system',
      primaryColor: '#3b82f6',
      componentLibrary: 'shadcn'
    }
  }
};

// 样例项目数据
export const sampleProjects: Project[] = [
  {
    id: 'sample-ai-components-001',
    name: 'AI Component Library',
    description: 'A comprehensive collection of AI-generated React components with interactive demos and real-time state management',
    userId: '1', // Admin User
    createdAt: new Date('2024-12-01'),
    updatedAt: new Date('2024-12-01'),
    thumbnail: '/api/projects/sample-1/thumbnail',
    status: 'published',
    type: 'component',
    framework: 'nextjs',
    files: [
      ...defaultProjectTemplate.files,
      {
        id: 'comp-1',
        name: 'button.tsx',
        path: 'src/components/ui/button.tsx',
        content: `'use client';

import { useState } from 'react';
import { cn } from '@/lib/utils';

interface ButtonProps {
  children: React.ReactNode;
  variant?: 'primary' | 'secondary' | 'outline' | 'ghost';
  size?: 'sm' | 'md' | 'lg';
  onClick?: () => void;
  disabled?: boolean;
  className?: string;
}

export function Button({ 
  children, 
  variant = 'primary', 
  size = 'md', 
  onClick,
  disabled = false,
  className
}: ButtonProps) {
  const [isClicked, setIsClicked] = useState(false);

  const handleClick = () => {
    if (!disabled && onClick) {
      setIsClicked(true);
      onClick();
      setTimeout(() => setIsClicked(false), 150);
    }
  };

  const baseClasses = 'inline-flex items-center justify-center rounded-lg font-medium transition-all duration-200 focus:outline-none focus:ring-2 focus:ring-offset-2 active:scale-95';
  
  const variantClasses = {
    primary: 'bg-blue-600 text-white hover:bg-blue-700 focus:ring-blue-500 shadow-sm hover:shadow-md',
    secondary: 'bg-gray-600 text-white hover:bg-gray-700 focus:ring-gray-500 shadow-sm hover:shadow-md',
    outline: 'border-2 border-blue-600 text-blue-600 hover:bg-blue-50 focus:ring-blue-500 hover:border-blue-700',
    ghost: 'text-gray-700 hover:bg-gray-100 focus:ring-gray-500'
  };

  const sizeClasses = {
    sm: 'px-3 py-1.5 text-sm',
    md: 'px-4 py-2 text-base',
    lg: 'px-6 py-3 text-lg'
  };

  const disabledClasses = 'opacity-50 cursor-not-allowed pointer-events-none';
  const clickedClasses = 'scale-95';

  return (
    <button
      className={cn(
        baseClasses,
        variantClasses[variant],
        sizeClasses[size],
        disabled && disabledClasses,
        isClicked && !disabled && clickedClasses,
        className
      )}
      onClick={handleClick}
      disabled={disabled}
      type="button"
    >
      {children}
    </button>
  );
}`,
        type: 'tsx',
        isGenerated: true,
        lastModified: new Date('2024-12-01'),
        dependencies: ['react', '@/lib/utils'],
        exports: ['Button']
      }
    ],
    config: defaultProjectTemplate.config
  }
];

// 在项目服务中使用的辅助函数
function getUserProjects(userId: string): Project[] {
  // 这里应该从实际存储中获取
  return sampleProjects.filter(p => p.userId === userId);
}
